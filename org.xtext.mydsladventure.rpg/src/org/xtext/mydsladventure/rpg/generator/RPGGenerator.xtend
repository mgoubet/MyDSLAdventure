/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mydsladventure.rpg.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import myDSLAdventure.Game
import myDSLAdventure.GameElementList
import myDSLAdventure.Player
import myDSLAdventure.Weapon
import myDSLAdventure.RoomList
import myDSLAdventure.WeaponList
import myDSLAdventure.ExitList
import myDSLAdventure.Monster
import myDSLAdventure.MonsterList
import myDSLAdventure.MonsterEquipment
import myDSLAdventure.MonsterPlacement
import myDSLAdventure.Exit
import myDSLAdventure.Room
import myDSLAdventure.MonsterStatement
import java.util.List
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RPGGenerator extends AbstractGenerator {
	
	Player player;
	List<RoomList> rooms;
	ExitList gameExits;
	List<Monster> monsters = new ArrayList<Monster>();
	List<MonsterPlacement> monsterPlacements = new ArrayList<MonsterPlacement>();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(resource.URI.trimFileExtension.appendFileExtension("aslx").lastSegment, 
			resource.allContents.filter(Game).toIterable.head.compile.toString);
	}
	
	def findRoom(String id) {
		for (list : rooms) {
			for (room : list.room) {
				if (room.name.equals(id))
					return room;
			}
		}
	}
		
	def dispatch compile(RoomList rooms) '''
		«FOR room : rooms.room»
			« room.compile »
		«ENDFOR»
	'''
	def dispatch compile(WeaponList monsterList) ''''''

	def dispatch compile(Player player) '''
		<object name="player">
	      <inherit name="editor_object" />
	      <inherit name="editor_player" />
	    </object>	
	'''	
	
	def dispatch compile(GameElementList monsterList) ''''''
	def dispatch compile(MonsterStatement monsterList) ''''''
	
	def dispatch compile(Monster monster) '''
			<object name="«monster.name»">
		      <inherit name="editor_object" />
		      <alias>«monster.fullName»</alias>
		      <displayverbs type="stringlist" />
		      <health type="int">« monster.health »</health>
		      <attack type="script"><![CDATA[
		      	this.health = this.health - « 2 »
				msg("You inflict « -2 »HP to « monster.fullName »")
		      	if (this.health <= 0) {
		      		RemoveObject(«monster.name»)
		      		msg("You kill « monster.fullName »")
		      	}
		      	else {
			      	msg("« monster.fullName » uses « monster.baseWeaponName »")
			      	msg("You lost « monster.baseDamage » HP")
			      	DecreaseHealth(« monster.baseDamage * 100 / player.healthPoints »)
		      	}
		      ]]>
		      </attack>
		    </object>
	'''

	def dispatch compile(MonsterEquipment monsterList) '''TODO'''
	
	def dispatch compile(Exit exit) '''
		<exit alias="« exit.action »" to="« exit.goto.fullName »">
			<message>« exit.description »</message>
		</exit>
	'''


	def dispatch compile(Room room) '''
		  <object name="« room.fullName »">
		    <inherit name="editor_room" />
		    <isroom />
		    <description>« room.description »</description>
		    <descprefix>You are in</descprefix>
		    <objectslistprefix>You can see</objectslistprefix>
		    <usedefaultprefix type="boolean">false</usedefaultprefix>
			«FOR exit : room.exits»
				« exit.compile »
			«ENDFOR»
			«FOR gameExit : gameExits.room»
				«IF gameExit.equals(room)»
					<enter type="script">
						finish
					</enter>
				«ENDIF»
			«ENDFOR»
			«IF player.startRoom.equals(room) »
				« player.compile »
			«ENDIF»
			«FOR placement: monsterPlacements »
				«IF placement.room.equals(room)»
					«FOR monster: monsters»
						«IF monster.equals(placement.monster)»
							« monster.compile »
						«ENDIF»
					«ENDFOR»
				«ENDIF»
			«ENDFOR»
		  </object>
	'''

	def dispatch compile(Weapon monsterList) ''''''
	
	def dispatch compile(Game game) {
	
	this.player = game.gameelementlist.filter(Player).get(0);
	this.rooms = game.gameelementlist.filter(RoomList).toList();
	this.gameExits = game.gameelementlist.filter(ExitList).get(0);
	
	for (MonsterList list : game.gameelementlist.filter(MonsterList).toList()) {
		this.monsterPlacements.addAll(list.monsterstatement.filter(MonsterPlacement).toList());
		this.monsters.addAll(list.monsterstatement.filter(Monster).toList());
	}
	
	'''
	<asl version="580">
	  <include ref="English.aslx" />
	  <include ref="Core.aslx" />
	  <game name="« game.gameTitle »">
	    <gameid>3a5e3f9b-f412-4085-b1c1-06d83237d484</gameid>
	    <version>1.0</version>
	    <firstpublished>2019</firstpublished>
	    <showhealth />
	    <turnoffcompass />
	    <onhealthzero type="script">
	    	SetBackgroundColour ("Gray")
	    	SetForegroundColour ("Red")
	    	SetFontSize (32)
	    	PrintCentered("WASTED")
	    	finish
	    </onhealthzero>
	  </game>
	  <verb>
	  	<property>attack</property>
	  	<pattern>attack</pattern>
	  	<defaultexpression>"Thou shall not attack " + object.article + "."</defaultexpression>
	  </verb>
	
		 «FOR elem : game.gameelementlist.filter(RoomList) »
			« elem.compile »
		 «ENDFOR»
	 	 «FOR elem : game.gameelementlist.filter(WeaponList) »
	 		« elem.compile »
	 	 «ENDFOR»
	
	</asl>
	
	'''
	
	}
	
}
