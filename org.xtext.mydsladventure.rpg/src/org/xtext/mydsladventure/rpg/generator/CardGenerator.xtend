/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mydsladventure.rpg.generator

import java.awt.Color
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.File
import java.util.ArrayList
import java.util.Arrays
import java.util.List
import java.util.regex.Pattern
import javax.imageio.ImageIO
import myDSLAdventure.Game
import myDSLAdventure.Monster
import myDSLAdventure.MonsterEquipment
import myDSLAdventure.MonsterList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CardGenerator extends AbstractGenerator {
	
	File cardTemplate;

	List<Monster> monsters = new ArrayList<Monster>();
	List<MonsterEquipment> monsterEquipments = new ArrayList<MonsterEquipment>();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var filename = ResourceList.getResources(Pattern.compile(".*generator/resources/templates/card\\.jpg")).get(0)
		cardTemplate = new File(filename);
		
		var cards = resource.allContents.filter(Game).toIterable.head.compile
		
		for (Card c : cards) {
			c.write(resource, fsa);
		}
	}
	
	def compile(Monster monster) {
		var bufferedImage = ImageIO.read(cardTemplate);

	    var g2d = bufferedImage.createGraphics();
	    
	    g2d.setColor(Color.black);
	    g2d.drawString(monster.fullName, 40, 50)
	    
	    g2d.drawString(monster.health + " HP", 40, 332)
	    
	    g2d.drawString("- " + monster.baseWeaponName, 40, 370)
	    g2d.drawString(String.valueOf(monster.baseDamage) + " D4", 320, 370)
	    
	    var i = 1;
	    
	    for (MonsterEquipment meq : monsterEquipments) {
	    	if (meq.monster.equals(monster)) {
			    g2d.drawString("- " + meq.weapon.fullName, 40, 370 + i * 25)
			    g2d.drawString(String.valueOf(meq.weapon.damage) + " D4", 320, 370 + i * 25)
			    i++;
	    	}
	    }

	    g2d.dispose();
	    
	    var baos = new ByteArrayOutputStream();
	    ImageIO.write(bufferedImage, "png", baos);
	    	    
	    return  Arrays.asList(Card.fromByteArray(baos.toByteArray(), monster.name));
	}
	
	def compile(Game game) {
		var cards = new ArrayList();
		
		for (MonsterList list : game.gameElementLists.filter(MonsterList).toList()) {
			this.monsterEquipments.addAll(list.monsterStatements.filter(MonsterEquipment).toList());
			this.monsters.addAll(list.monsterStatements.filter(Monster).toList());
		}
		
		for (Monster m : this.monsters) {
			cards.addAll(m.compile)
		}
		
		return cards;
	}
	
	static class Card {
		
		String name;
		ByteArrayInputStream stream;
		
		def static fromByteArray(byte[] array, String name) {
			var card = new Card;
			card.stream = new ByteArrayInputStream(array);
			card.name = name;
			return card;
		}
		
		def write(Resource resource, IFileSystemAccess2 fsa) {
			fsa.generateFile(resource.URI.trimFileExtension.segment(resource.URI.trimFileExtension.segmentCount - 1) + "/" + name + ".png", stream);
		}
	}
	
}
