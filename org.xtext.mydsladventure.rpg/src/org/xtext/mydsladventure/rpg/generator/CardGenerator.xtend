/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mydsladventure.rpg.generator

import java.awt.Color
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.File
import java.util.ArrayList
import java.util.Arrays
import java.util.List
import java.util.regex.Pattern
import javax.imageio.ImageIO
import myDSLAdventure.Game
import myDSLAdventure.Monster
import myDSLAdventure.MonsterEquipment
import myDSLAdventure.MonsterList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import myDSLAdventure.RoomList
import myDSLAdventure.Room
import java.util.StringTokenizer
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import org.eclipse.xtext.util.RuntimeIOException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CardGenerator extends AbstractGenerator {
	
	File cardTemplate;
	String resourcesPath;

	File defaultMonster;

	List<Monster> monsters = new ArrayList<Monster>();
	List<MonsterEquipment> monsterEquipments = new ArrayList<MonsterEquipment>();
	
	IFileSystemAccess2 filesystem;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var filename = ResourceList.getResources(Pattern.compile(".*generator/resources/templates/card\\.jpg")).get(0)
		cardTemplate = new File(filename);
		
		filesystem = fsa;
		resourcesPath = "../src/resources/";

		defaultMonster = new File(ResourceList.getResources(Pattern.compile(".*generator/resources/templates/monster\\.png")).get(0));
	
		var cards = resource.allContents.filter(Game).toIterable.head.compile
		
		for (Card c : cards) {
			c.write(resource, fsa);
		}
	}
	
	def compile(Monster monster) {
		var bufferedImage = ImageIO.read(cardTemplate);

	    var g2d = bufferedImage.createGraphics();
	    
	    drawCardImage(g2d, resourcesPath + "monsters/" + monster.name + ".png", defaultMonster);

	    g2d.setColor(Color.black);
	    g2d.drawString(monster.fullName, 40, 50)
	    
	    g2d.drawString(monster.health + " HP", 40, 332)
	    
	    g2d.drawString("- " + monster.baseWeaponName, 40, 370)
	    g2d.drawString(String.valueOf(monster.baseDamage) + " D4", 320, 370)
	    
	    var i = 1;
	    
	    for (MonsterEquipment meq : monsterEquipments) {
	    	if (meq.monster.equals(monster)) {
			    g2d.drawString("- " + meq.weapon.fullName, 40, 370 + i * 25)
			    g2d.drawString(String.valueOf(meq.weapon.damage) + " D4", 320, 370 + i * 25)
			    i++;
	    	}
	    }

	    g2d.dispose();
	    
	    var baos = new ByteArrayOutputStream();
	    ImageIO.write(bufferedImage, "png", baos);
	    	    
	    return  Arrays.asList(Card.fromByteArray(baos.toByteArray(), monster.name));
	}
	
	def compile(Room room) {
		var bufferedImage = ImageIO.read(cardTemplate);

	    var g2d = bufferedImage.createGraphics();
	    
	    g2d.setColor(Color.black);
	    g2d.drawString(room.fullName, 40, 50)
	    
	    drawString(g2d, room.description, 45, 40, 370)

	    g2d.dispose();
	    
	    var baos = new ByteArrayOutputStream();
	    ImageIO.write(bufferedImage, "png", baos);
	    	    
	    return  Arrays.asList(Card.fromByteArray(baos.toByteArray(), room.name));
	}
	
	def compile(Game game) {
		var cards = new ArrayList();
		
		for (MonsterList list : game.gameElementLists.filter(MonsterList).toList()) {
			this.monsterEquipments.addAll(list.monsterStatements.filter(MonsterEquipment).toList());
			this.monsters.addAll(list.monsterStatements.filter(Monster).toList());
		}
		
		for (Monster m : this.monsters) {
			cards.addAll(m.compile)
		}
		
		for (RoomList list : game.gameElementLists.filter(RoomList).toList()) {
			for (Room room : list.rooms.toList()) {
				cards.addAll(room.compile)
			}
		}
		
		return cards;
	}
	
	def drawCardImage(Graphics2D g2d, String path, File defaultImage) {   
		var BufferedImage image = null;
		try {
			var bin = filesystem.readBinaryFile(path);
			image = ImageIO.read(bin);
		}
		catch(RuntimeIOException e) {
			image = ImageIO.read(defaultImage);
		}

	    var ratio = image.width / image.height as double;
	    var sw = 328.0;
	    var sh = 242.0;
	    if (ratio > (sw / sh)) {
	    	sh = sw / ratio;
	    } else {
	    	sw = sh * ratio;
	    }
	    var sx = (36 + (328 - sw) / 2) as int;
	    var sy = (68 + (242 - sh) / 2) as int;

	    g2d.drawImage(image, sx, sy, sx + sw as int, sy + sh as int, 0, 0, image.width, image.height, null);
	}
	
	def drawString(Graphics2D g2d, String text, int maxLineLength, int startX, int startY) {
		var formated = addLinebreaks(text, maxLineLength)
		var count = 0
		for (String line : formated.split("\n")) {
	    	g2d.drawString(line, startX, startY + count * 12)
	    	count++	
		}
	}

	def addLinebreaks(String input, int maxLineLength) {
	    var tok = new StringTokenizer(input, " ");
	    var output = new StringBuilder(input.length());
	    var lineLen = 0;
	    while (tok.hasMoreTokens()) {
	        var word = tok.nextToken();
	
	        if (lineLen + word.length() > maxLineLength) {
	            output.append("\n");
	            lineLen = 0;
	        }
	        output.append(word + " ");
	        lineLen += word.length();
	    }
	    return output.toString();
	}
	
	static class Card {
		
		String name;
		ByteArrayInputStream stream;
		
		def static fromByteArray(byte[] array, String name) {
			var card = new Card;
			card.stream = new ByteArrayInputStream(array);
			card.name = name;
			return card;
		}
		
		def write(Resource resource, IFileSystemAccess2 fsa) {
			fsa.generateFile(resource.URI.trimFileExtension.segment(resource.URI.trimFileExtension.segmentCount - 1) + "/" + name + ".png", stream);
		}
	}
	
}
