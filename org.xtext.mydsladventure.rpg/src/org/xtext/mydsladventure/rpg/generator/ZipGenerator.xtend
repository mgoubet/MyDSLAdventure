/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mydsladventure.rpg.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.awt.image.BufferedImage
import javax.imageio.ImageIO
import org.eclipse.xtext.util.RuntimeIOException
import myDSLAdventure.Game
import myDSLAdventure.MonsterList
import myDSLAdventure.Monster
import java.util.List
import java.util.ArrayList
import myDSLAdventure.RoomList
import myDSLAdventure.Room
import myDSLAdventure.Weapon
import myDSLAdventure.WeaponList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ZipGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var zipFile = new QuestArchiveBuilder()
			.addFile(
				resource.URI.trimFileExtension.appendFileExtension("aslx").lastSegment,
				fsa.readTextFile(resource.URI.trimFileExtension.appendFileExtension("aslx").lastSegment).toString()
			)
			.addFilesFromResources(".*generator/resources/CombatLib/.*\\.aslx")
			.addFilesFromResources(".*generator/resources/CombatLib/.*\\.xml")
		
		var gameName = resource.URI.trimFileExtension.segment(resource.URI.trimFileExtension.segmentCount - 1);
		var game = resource.allContents.filter(Game).toIterable.head
		
		var List<Monster> monsters = new ArrayList();
		var List<Room> rooms = new ArrayList();
		var List<Weapon> weapons = new ArrayList();
		
		for (MonsterList list : game.gameElementLists.filter(MonsterList).toList()) {
			monsters.addAll(list.monsterStatements.filter(Monster).toList());
		}
		
		for (RoomList list : game.gameElementLists.filter(RoomList).toList()) {
			rooms.addAll(list.rooms.filter(Room).toList());
		}
		
		for (WeaponList list : game.gameElementLists.filter(WeaponList).toList()) {
			weapons.addAll(list.weapons.filter(Weapon).toList());
		}
		
		for (Monster m : monsters) {
			try {
				var bin = fsa.readBinaryFile(gameName + "/" + m.name + ".png");
				zipFile.addFileFromStream(gameName + "/" + m.name + ".png", bin);
			}
			catch(RuntimeIOException e) {
			}
		}
		
		for (Room r : rooms) {
			try {
				var bin = fsa.readBinaryFile(gameName + "/" + r.name + ".png");
				zipFile.addFileFromStream(gameName + "/" + r.name + ".png", bin);
			}
			catch(RuntimeIOException e) {
			}
		}
		
		for (Weapon w : weapons) {
			try {
				var bin = fsa.readBinaryFile(gameName + "/" + w.name + ".png");
				zipFile.addFileFromStream(gameName + "/" + w.name + ".png", bin);
			}
			catch(RuntimeIOException e) {
			}
		}
		
		try {
			var bin = fsa.readBinaryFile(gameName + "_map.png");
			zipFile.addFileFromStream(gameName + "_map.png", bin);
		}
		catch(RuntimeIOException e) {
		}

		var zip = zipFile.stream
		fsa.generateFile(resource.URI.trimFileExtension.appendFileExtension("zip").lastSegment, zip);
	}
	
}
