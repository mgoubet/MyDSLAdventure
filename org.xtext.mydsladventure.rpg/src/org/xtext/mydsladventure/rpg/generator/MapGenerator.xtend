/*
 * generated by Xtext 2.15.0
 */
package org.xtext.mydsladventure.rpg.generator

import java.awt.Color
import java.awt.geom.Path2D
import java.awt.image.BufferedImage
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.util.ArrayList
import java.util.HashMap
import javax.imageio.ImageIO
import myDSLAdventure.Exit
import myDSLAdventure.Game
import myDSLAdventure.Room
import myDSLAdventure.RoomList
import org.eclipse.draw2d.graph.DirectedGraph
import org.eclipse.draw2d.graph.DirectedGraphLayout
import org.eclipse.draw2d.graph.Edge
import org.eclipse.draw2d.graph.Node
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.draw2d.geometry.Point
import java.awt.Graphics2D
import java.awt.geom.AffineTransform
import java.awt.Polygon
import java.awt.geom.Line2D
import java.awt.geom.Point2D

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MapGenerator extends AbstractGenerator {
	
	val arrowSize = 4;
	var padding = 20;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var rooms = new ArrayList();
		for (RoomList list : resource.allContents.filter(Game).toIterable.head.gameElementLists.filter(RoomList).toList()) {
			rooms.addAll(list.rooms);
		}
		
		var graph = new DirectedGraph();
		var nodes = new HashMap();
		
		var cg2d = new BufferedImage(10, 10, BufferedImage.TYPE_INT_ARGB).createGraphics();
		
		for (Room r : rooms) {
			var node = new Node(r.name);
			node.width = cg2d.getFontMetrics().stringWidth(r.name) + padding;
			graph.nodes.add(node);
			nodes.put(r.name, node);
		}
		
		for (Room from : rooms) {
			for (Exit to : from.exits) {
				var edge = new Edge(to.action, nodes.get(from.name), nodes.get(to.goto.name));
				edge.setPadding(padding);
				edge.setWidth(cg2d.getFontMetrics().stringWidth(to.action));
				graph.edges.add(edge);
			}
		}
		
		var layout = new DirectedGraphLayout();
		layout.visit(graph);
		
		var maxX = 0;
		var maxY = 0;
		
		for (var i = 0; i < graph.nodes.length; i++) {
			var node = graph.nodes.getNode(i);
			maxX = Math.max(maxX, node.x + node.width);
			maxY = Math.max(maxY, node.y + node.height);
		}
		
		for (var i = 0; i < graph.edges.length; i++) {
			var edge = graph.edges.getEdge(i);
			for (var p = 0; p < edge.points.size; p++) {
				var point = edge.points.getPoint(p);
				maxX = Math.max(maxX, point.x);
				maxY = Math.max(maxY, point.y);
			}
			
			maxX = Math.max(maxX, edge.points.midpoint.x + cg2d.getFontMetrics().stringWidth(edge.data as String) / 2);
		}
		
		var bufferedImage = new BufferedImage(maxX + padding * 2, maxY + padding * 2, BufferedImage.TYPE_INT_ARGB);

	    var g2d = bufferedImage.createGraphics();
	    
	    g2d.background = Color.LIGHT_GRAY;
	    g2d.clearRect(0, 0, bufferedImage.width, bufferedImage.height);
	    g2d.setColor(Color.black);
	    
		for (var i = 0; i < graph.nodes.length; i++) {
			var node = graph.nodes.getNode(i);
			g2d.setColor(Color.white);
			g2d.fillRoundRect(node.x + padding, node.y + padding, node.width, node.height, 5, 5);
			g2d.setColor(Color.black);
			g2d.drawRoundRect(node.x + padding, node.y + padding, node.width, node.height, 5, 5);
	    	g2d.drawString(node.data.toString(), node.x + padding / 2 + padding, node.y + node.height / 2 + padding);
		}
		
		for (var i = 0; i < graph.edges.length; i++) {
			var edge = graph.edges.getEdge(i);
			var path = new Path2D.Double();
			
			path.moveTo(edge.points.getPoint(0).x + padding, edge.points.firstPoint.y + padding);
			for (var p = 1; p < edge.points.size; p++) {
				var point = edge.points.getPoint(p);
				path.lineTo(point.x + padding, point.y + padding);
			}
			g2d.setColor(Color.black);
			g2d.draw(path);
			
			var oneToLast = edge.points.getPoint(edge.points.size - 2);		
			var line = new java.awt.geom.Line2D.Double();
			line.setLine(oneToLast.x + padding, oneToLast.y + padding, edge.points.lastPoint.x + padding, edge.points.lastPoint.y + padding);
			drawArrowHead(g2d, line);
			
			var dx = cg2d.getFontMetrics().stringWidth(edge.data.toString()) / 2
			g2d.setColor(Color.white);
			g2d.fillRoundRect(edge.points.midpoint.x - dx + padding / 2 + padding / 4, edge.points.midpoint.y + padding / 2 + 1, dx * 2 + padding / 2, 10, 5, 5);
			g2d.setColor(Color.black);
	    	g2d.drawString(edge.data.toString(), edge.points.midpoint.x - dx + padding, edge.points.midpoint.y + padding);
		}

	    g2d.dispose();
	    
	    var baos = new ByteArrayOutputStream();
	    ImageIO.write(bufferedImage, "png", baos);
		var stream = new ByteArrayInputStream(baos.toByteArray());
		
		fsa.generateFile(resource.URI.trimFileExtension.segment(resource.URI.trimFileExtension.segmentCount - 1) + "_map.png", stream);
	}
	
	def void drawArrowHead(Graphics2D g2d, Line2D line) { 
		var tx = new AffineTransform(); 
	    tx.setToIdentity();
	    var angle = Math.atan2(line.y2-line.y1, line.x2-line.x1);
	    tx.translate(line.x2, line.y2);
	    tx.rotate((angle-Math.PI/2d));
	    
	    var arrowHead = new Polygon();  
		arrowHead.addPoint(0, 0);
		arrowHead.addPoint(-arrowSize, -2 - arrowSize * 2);
		arrowHead.addPoint(arrowSize, -2 - arrowSize * 2);
	
	    var g = g2d.create() as Graphics2D;
	    g.setTransform(tx);   
	    g.fill(arrowHead);
	    g.dispose();
	}
	
}
